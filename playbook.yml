---
- hosts: localhost
  connection: local
  vars:
    aws_config_dir: "{{ansible_env.HOME}}/.aws"
    bash_profile: "{{ansible_env.HOME}}/.bash_profile"
    bashrc: "{{ansible_env.HOME}}/.bashrc"
  tasks:
    ###
    # pip installed
    ###
    - name: pip has been installed?
      stat: path=/usr/local/bin/pip
      register: pip_command
    - name: install pip
      shell: easy_install pip
      become: yes
      when: not pip_command.stat.exists
      tags:
      - skip_ansible_lint
    - name: pip.conf for pip
      copy:
        src: pip.conf
        dest: "{{ansible_env.HOME}}/.pip/pip.conf"
    - name: pydistutils.cfg for pip
      copy:
        src: pydistutils.cfg
        dest: "{{ansible_env.HOME}}/.pydistutils.cfg"
    ###
    # Homebrew
    ###
    - name: updates homebrew
      homebrew: update_homebrew=yes
    - name: verifies that brew packages are present
      homebrew:
        name: "{{item}}"
        state: present
      with_items:
      - chruby
      - git
      - gnupg
      - pwgen
    - name: updates brew packages
      homebrew:
        name: "{{item}}"
        state: latest
      with_items:
      - ansible-lint
      - awscli
      - bash-completion
      - ruby-install
      - shellcheck
      - tig
      - wget
      tags:
      - skip_ansible_lint
    - name: homebrew cleanup
      command: brew cleanup
      tags:
      - skip_ansible_lint
    ###
    # pip packages
    ###
    - name: updates pip packages
      pip:
        name: "{{item}}"
        extra_args: '--user'
        state: latest
      with_items:
      - pip
      - apache-libcloud
      - boto3
      - pylint
      - pycrypto
      tags:
      - skip_ansible_lint
    ###
    # ruby
    ###
    - name: ruby 2.4.1 installed?
      stat: path="{{ansible_env.HOME}}/.rubies/ruby-2.4.1"
      register: ruby_installed
    - name: install ruby 2.4.1
      command: ruby-install ruby 2.4.1
      when: not ruby_installed.stat.exists

    ###
    # gem (user_install wouldn't work nicely with chruby)
    ###
    - name: updates gem packages
      gem:
        name: "{{item}}"
        state: latest
        user_install: no
      with_items:
      - bundler
      - rubocop
      - travis-lint
      tags:
      - skip_ansible_lint
    ###
    # aws config
    ###
    - name: aws has been configured?
      stat: path="{{aws_config_dir}}"
      register: aws_config_done
    - name: creates basic aws config
      command: aws configure
      when: not aws_config_done.stat.exists
    - name: enables preview section
      lineinfile:
        path: "{{aws_config_dir}}/config"
        regexp: '^\[preview\]$'
        line: '[preview]'
        state: present
    - name: adds cloudfront into preview section
      lineinfile:
        path: "{{aws_config_dir}}/config"
        regexp: '^cloudfront = '
        line: 'cloudfront = true'
        insertafter: '^\[preview\]$'
        state: present
    ###
    # bash modifications
    ###
    - name: ~/.bashrc should exist
      copy:
        src: "/usr/local/etc/bash_completion.d/git-prompt.sh"
        dest: "{{bashrc}}"
        mode: 0755
    - name: enables chruby .bash_profile
      lineinfile:
        path: "{{bash_profile}}"
        regexp: '^source .*/chruby/{{item}}.sh$'
        line: 'source /usr/local/opt/chruby/share/chruby/{{item}}.sh'
      with_items:
      - chruby
      - auto
    - name: adds git branch into prompt
      blockinfile:
        path: "{{bash_profile}}"
        state: present
        content: |
          chruby 2.5.0
          export PATH=$PATH:$HOME/Library/Python/3.7/bin
          if [ -f "${HOME}/.bashrc" ]; then
            # shellcheck source=/dev/null
            source "${HOME}/.bashrc"
            export GIT_PS1_SHOWCOLORHINTS=true
            export PROMPT_COMMAND='__git_ps1 "\h:\w" " \\\$ "'
          fi

    ###
    # git
    ###
    - name: adds global .gitignore
      file:
        src: "{{playbook_dir}}/files/gitignore"
        dest: "{{ansible_env.HOME}}/.gitignore"
        state: link
    - name: adds block into .gitconfig
      blockinfile:
        path: "{{ansible_env.HOME}}/.gitconfig"
        state: present
        content: |
          [core]
              editor = /usr/bin/vim
              excludesfile = /Users/jylitalo/.gitignore
          [push]
              default = simple

    ###
    # vim
    ###
    - name: create dirs for synaptic
      file:
        path: "{{ansible_env.HOME}}/.vim/{{item}}"
        state: directory
      with_items:
      - autoload
      - bundle
    - name: install syntastic
      git:
        repo: "https://github.com/vim-syntastic/syntastic.git"
        dest: "{{ansible_env.HOME}}/.vim/bundle/syntastic"
        depth: 1
      tags:
      - skip_ansible_lint
    - name: installs dot config files
      file:
        src: "{{playbook_dir}}/files/{{item.src}}"
        dest: "{{ansible_env.HOME}}/.{{item.dest}}"
        state: link
      with_items:
      - {src: "vimrc", dest: "vimrc"}
      - {src: "vim/pathogen.vim", dest: "vim/autoload/pathogen.vim"}
    ###
    # gnupg
    ###
    - name: uncomment chartset from gpg config
      lineinfile:
        dest: "{{ansible_env.HOME}}/.gnupg/gpg.conf"
        regexp: '^#.*charset utf-8$'
        line: 'charset utf-8'
